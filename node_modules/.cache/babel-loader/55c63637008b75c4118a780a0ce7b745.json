{"ast":null,"code":"import _regeneratorRuntime from \"/Users/imranjami/Dropbox/My Mac (Imrans-MacBook-Pro.local)/Documents/blockchain/dstorage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/imranjami/Dropbox/My Mac (Imrans-MacBook-Pro.local)/Documents/blockchain/dstorage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/imranjami/Dropbox/My Mac (Imrans-MacBook-Pro.local)/Documents/blockchain/dstorage/src/components/App.js\";\nimport DStorage from '../abis/DStorage.json';\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css'; // Instantiate IPFS variable\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // IPFS Link: https://ipfs.infura.io/ipfs/(+ HASH)\n\nclass App extends Component {\n  componentWillMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.loadWeb3();\n\n            case 2:\n              _context.next = 4;\n              return _this.loadBlockchainData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  loadWeb3() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert('Non-Ethereum browser detected.');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  loadBlockchainData() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var web3, accounts, networkId, networkData, dstorage, filesCount, i, file;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Instantiate web3 variable\n              web3 = window.web3; // Loads the account\n\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n\n              // Sets the account attribute of the state variable\n              _this2.setState({\n                account: accounts[0]\n              }); // Gets the Ethereum-based network ID\n\n\n              _context3.next = 7;\n              return web3.eth.net.getId();\n\n            case 7:\n              networkId = _context3.sent;\n              // Gets the network data using the network ID. This is found in the src/abis/DStorage.json file\n              networkData = DStorage.networks[networkId]; // Check to see if the contract lives on the given network\n\n              if (!networkData) {\n                _context3.next = 27;\n                break;\n              }\n\n              // Create new contract via web3. web3.eth.Contract(<JSON-Interface>, <address>)\n              dstorage = new web3.eth.Contract(DStorage.abi, networkData.address); // Sets the dstorage object attribute of the state variable\n\n              _this2.setState({\n                dstorage\n              }); // Get files count\n\n\n              _context3.next = 14;\n              return dstorage.methods.fileCount().call();\n\n            case 14:\n              filesCount = _context3.sent;\n\n              // Sets the filesCount of the state variable\n              _this2.setState({\n                filesCount\n              }); // Reverse load the files (to display most recent at the top in the UI)\n\n\n              i = filesCount;\n\n            case 17:\n              if (!(i >= 1)) {\n                _context3.next = 25;\n                break;\n              }\n\n              _context3.next = 20;\n              return dstorage.methods.files(i).call();\n\n            case 20:\n              file = _context3.sent;\n\n              _this2.setState({\n                files: [..._this2.state.files, file]\n              });\n\n            case 22:\n              i--;\n              _context3.next = 17;\n              break;\n\n            case 25:\n              _context3.next = 28;\n              break;\n\n            case 27:\n              window.alert('DStorage contract not deployed to detected network.');\n\n            case 28:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  } // Event to get file from user\n\n\n  //Set states\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      // Stops any default behavior so the page doesn't refresh and we can override\n      event.preventDefault(); // Gets the file from the form field\n\n      var file = event.target.files[0]; // Instantiate new FileReader object native to JavaScript\n\n      var reader = new window.FileReader();\n\n      if (file) {\n        reader.readAsArrayBuffer(file);\n\n        reader.onloadend = () => {\n          this.setState({\n            buffer: Buffer(reader.result),\n            type: file.type,\n            name: file.name\n          });\n          console.log('buffer', this.state.buffer);\n        };\n      }\n    };\n\n    this.uploadFile = description => {\n      console.log(\"Submitting file to IPFS...\");\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log(\"IPFS result\", result);\n\n        if (error) {}\n      }); //Add file to the IPFS\n      //Check If error\n      //Return error\n      //Set state to loading\n      //Assign value for the file without extension\n      //Call smart contract uploadFile function\n    };\n\n    this.state = {\n      account: '',\n      dstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    }; //Bind functions\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 59\n      }\n    }, \"Loading...\")) : /*#__PURE__*/React.createElement(Main, {\n      files: this.state.files,\n      captureFile: this.captureFile,\n      uploadFile: this.uploadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/imranjami/Dropbox/My Mac (Imrans-MacBook-Pro.local)/Documents/blockchain/dstorage/src/components/App.js"],"names":["DStorage","React","Component","Navbar","Main","Web3","ipfsClient","require","ipfs","host","port","protocol","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","dstorage","Contract","abi","address","methods","fileCount","call","filesCount","i","files","file","state","constructor","props","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","type","name","console","log","uploadFile","description","add","error","loading","render"],"mappings":"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","sourcesContent":["import DStorage from '../abis/DStorage.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n// Instantiate IPFS variable\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\n\n// IPFS Link: https://ipfs.infura.io/ipfs/(+ HASH)\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    } else {\n      window.alert('Non-Ethereum browser detected.')\n    }\n  }\n\n  async loadBlockchainData() {\n    // Instantiate web3 variable\n    const web3 = window.web3\n    // Loads the account\n    const accounts = await web3.eth.getAccounts()\n    // Sets the account attribute of the state variable\n    this.setState({account: accounts[0]})\n    // Gets the Ethereum-based network ID\n    const networkId = await web3.eth.net.getId()\n    // Gets the network data using the network ID. This is found in the src/abis/DStorage.json file\n    const networkData = DStorage.networks[networkId]\n    // Check to see if the contract lives on the given network\n    if(networkData) {\n      // Create new contract via web3. web3.eth.Contract(<JSON-Interface>, <address>)\n      const dstorage = new web3.eth.Contract(DStorage.abi, networkData.address)\n      // Sets the dstorage object attribute of the state variable\n      this.setState({ dstorage })\n      // Get files count\n      const filesCount = await dstorage.methods.fileCount().call()\n      // Sets the filesCount of the state variable\n      this.setState({ filesCount })\n      // Reverse load the files (to display most recent at the top in the UI)\n      for (var i = filesCount; i >= 1; i--) {\n        const file = await dstorage.methods.files(i).call()\n        this.setState({\n          files: [...this.state.files, file]\n        })\n      }\n    } else {\n      window.alert('DStorage contract not deployed to detected network.')\n    }\n  }\n\n  // Event to get file from user\n  captureFile = (event) => {\n    // Stops any default behavior so the page doesn't refresh and we can override\n    event.preventDefault()\n    // Gets the file from the form field\n    const file = event.target.files[0]\n    // Instantiate new FileReader object native to JavaScript\n    const reader = new window.FileReader()\n    if (file) {\n      reader.readAsArrayBuffer(file)\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result),\n          type: file.type,\n          name: file.name\n        })\n        console.log('buffer', this.state.buffer)\n      }\n    }\n  }\n\n\n  // Upload File\n  uploadFile = (description) => {\n    console.log(\"Submitting file to IPFS...\")\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log(\"IPFS result\", result)\n      if (error) {\n\n      }\n    })\n    //Add file to the IPFS\n\n      //Check If error\n        //Return error\n\n      //Set state to loading\n\n      //Assign value for the file without extension\n\n      //Call smart contract uploadFile function\n\n  }\n\n  //Set states\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    }\n\n    //Bind functions\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}